const input = require('fs')
  .readFileSync('/dev/stdin')
  .toString()
  .trim()
  .split('\n').map((v) => v.split(' ').map(Number))
const [T] = input[0]

const getGCD = (a, b) => b === 0 ? a : getGCD(b, a % b)
const getLCM = (a, b) => a*b/getGCD(a, b)

const ans = []
for (let i = 0; i < T; i++) {
    const [M, N, x, y] = input[1+i]
    let y1 = x
    let y2 = y
    const lcm = getLCM(M, N)
    while (true) {
        if (y1 > lcm && y2 > lcm) {
            ans.push(-1)
            break
        }
        if (y1 === y2) {
            ans.push(y1)
            break
        }
        if (y1 < y2) {
            y1 += M
            continue
        }
        y2 += N
    }
}
console.log(ans.join('\n'))

/*
9:18

<1:1> ~ <M:N>
M=10, N=12
<1:11>
1, 11, 21, ...
11, 23, ...
-> 11

<3:1>
3, 13, 23, ...
1, 13, ...
-> 13

<10:12>
10, 20, 30, 40, 50, 60, ...
12, 24, 36, 48, 60, ...
-> 60
2, 8, 4, 6, 6, 4, 8, 2, 10, 0

a, b 증가시키면서 가는데 같아지는 거 찾기
가능한 경우의 수를 다 나열해놓고 같은 거 찾기엔 비효율적인 듯
투포인터로 a가 b보다 작으면 a 증가시키고, 그 반대면 b 증가시키는 식으로.
40,000
39,999
최대 시간복잡도 뭐지
만약 a, b 같아지는 게 안 찾아지면? 안 찾아졌다는 걸 어떻게 알지?
투포인터로 하면 끊임없이 갈 텐데...

10, 12
<3:9>
3, 13, 23, 33, 43,
9, 21, 33,
-> 33
6, 4, 8, 2, 10, 0

10, 12
<7:2>
7, 17, 27, 37, 47, 57, 67, 77, 87, 97, 107, 117,
2, 14, 26, 38, 50, 62, 74, 86, 98, 110,

a, b의 차이: 5, 7, 9, 1, 11, 1, 9, 3, 7, 5, 7, 3, 9, 1, 11, 1, 9, 3, 7
반복되는 패턴이 있음

무한히 반복되는 거에는 패턴이 있다..
패턴 발생 여부로 판단하면 될 텐데, 패턴이 있다는 걸 어떻게 알지?
패턴 발생 시작점이 모호함.
수학적으로 판단할 수는 없을까?

7 + 10m = 2 + 12n
m이 홀수면 좌변이 홀수이므로 우변도 홀수여야 함. 근데 우변은 항상 짝수일 수밖에 없음
m이 짝수면 좌변이 홀수이므로 우변도 홀수여야 함. 근데 우변은 항상 짝수.
-> 모순 발생
만약 그게 아니라면 가다보면 만나지 않을까? 모순이 아닌데도 불가능한 경우가 있나?
가다보면 만난다라.. 기울기?
5 + 10m = 12n
5/12 + 10/12m = n -> 가능한 정수의 m,n이 있는지 봐도 되고
y = 10x + 7
y = 12x + 2
두 직선이 서로 만나는지 안 만나는지 봐도 됨
만나긴 할 텐데 정수의 해를 갖는지 봐야 함
만나는 지점의 x,y좌표의 정수 여부를 따지면 될 텐데, 만나는 지점을 알기 위해선 일일이 수를 대입해봐야 함. 우리가 대입해볼 수 있는 수는 정수임. 유리수면 그 수가 무한대이기 때문.
만나는 지점을 기준으로 y의 차가 줄어들었다가 다시 늘어남. 그러한 양상으로 만나긴 했는데 정수의 해가 없구나를 판단해볼 수 있음
-> 뭔가 이상.. 아 착각했음. 만나는 지점을 보고 싶은 게 아니라, y축에 수직인 선을 그었을 때 두 직선에 대응되는 x값 각각이 정수인 해가 있는지를 보고 싶음

13, 11
<5:6>
5, 18, 31, 44, 57, 70, 83,
6, 17, 28, 39, 50, 61, 72, 83,
-> 83
1, 12, 1, 10, 3, 8, 5, 6, 7, 4, 9, 2, 11, 0

5 + 13m = 6 + 11n
m=6, n=7
m이 홀수면 좌변이 짝수이므로 우변도 짝수여야 함. n이 짝수면 가능
m이 짝수면 좌변이 홀수이므로 우변도 홀수여야 함. n이 홀수면 가능

y = 13x + 5
y = 11x + 6

일단 그래프로 y축에 수직인 선 그어서 해석하는 것까진 알겠음
투포인터로 같은 y값 찾는 거까진 그럴 듯해 보임
근데 아직도 풀리지 않은 의문이, 무한정 수를 대입해볼 수는 없는 노릇, 정수인 해가 없다는 걸 어느 시점에 알 수 있느냐는 거임
지금까지 가장 유력한 게 홀수짝수론인데, 만약 모순이 발생하지 않을 때 무조건 정수인 해가 있는 건지를 아직 입증하지 못한 상태임.

다른 사람 풀이 보니 M과 N의 최소공배수까지만 y를 확인했음. 왜?
주기가 반복되기 때문이라고 함. 그 주기에서 동일한 y가 찾아지지 않으면 그 다음 주기에서도 찾아지지 않을 거라서. 주기의 최소 단위가 최소공배수인 거고. 이런 생각을 어떻게 할 수 있었지?
패턴을 찾으려는 시도... 반복되는 카잉 달력...

*/