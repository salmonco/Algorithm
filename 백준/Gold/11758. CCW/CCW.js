const input = require('fs')
  .readFileSync('/dev/stdin')
  .toString()
  .trim()
  .split('\n').map((v) => v.split(' ').map(Number))
const [x1, y1] = input[0]
const [x2, y2] = input[1]
const [x3, y3] = input[2]

// x1 x2 x3 x1
// y1 y2 y3 y1
const cross = x1*y2 + x2*y3 + x3*y1 - (x2*y1 + x3*y2 + x1*y3)

if (cross > 0) {
    console.log(1) // 반시계
} else if (cross < 0) {
    console.log(-1) // 시계
} else {
    console.log(0) // 일직선
}

/*
11:35
수학 문제같다

기울기가 첫째 것보다 둘째 게 더 크면 반시계
첫째 것보다 둘째 게 작으면 시계
기울기가 같으면 일직선

예외 상황이 있나? 음..없는듯
예제 3이 예외 케이스네
경우의 수를 다 따져봐야 할 듯
x좌표가 뒤에있는지 앞에있는지(왼쪽으로 이동 or 오른쪽으로 이동) 여부를 숫자 오른쪽 -,+로 표기
1-, 1/2- -> 시계
1-, 2- -> 반시계
1+, 1/2+ -> 시계
1+, 2+ -> 반시계
1-, 1/2+ -> 반시계
1-, 2+ -> 시계
1+, 1/2- -> 반시계
1+, 2- -> 시계

-1-, -1/2- -> 반시계

-, -고 둘째 게 더 작으면 -> 시계
-, -고 둘째 게 더 크면 -> 반시계
+, +고 둘째 게 더 작으면 -> 시계
+, +고 둘째 게 더 크면 -> 반시계

-, +고 둘째 게 더 작으면 -> 반시계
-, +고 둘째 게 더 크면 -> 시계
+, -고 둘째 게 더 작으면 -> 반시계
+, -고 둘째 게 더 크면 -> 시계

-> 실패. 기울기를 이용한 부동소수점 비교가 불안전하다고 함. 대신 외적을 이용할 수 있음

CCW는 Counter Clockwise의 약자로써, 평면 위에 놓여진 세 점의 방향관계를 구할 수 있는 알고리즘이다.
신발끈 공식. https://degurii.tistory.com/47
*/